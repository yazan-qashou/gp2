#include <WiFi.h>
#include <esp_now.h>

// Motor control pins and setup
int enA = 5, enB = 23;
int IN1 = 22, IN2 = 21, IN3 = 19, IN4 = 18;
#define R 0
#define L 1

// Follower position and threshold
int followerPosX = 90; // Initial position near the leader
int followerPosY = 90;
int movementThreshold = 10;

// Structure to match leader's data
typedef struct {
  int posX;
  int posY;
  char command;
  int speed;
  char direction;
} LeaderData;

LeaderData leaderData;

void setup() {
  Serial.begin(115200);

  pinMode(enA, OUTPUT);
  pinMode(enB, OUTPUT);
  ledcSetup(R, 5000, 8);
  ledcAttachPin(enA, R);
  ledcSetup(L, 5000, 8);
  ledcAttachPin(enB, L);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  stop();

  WiFi.mode(WIFI_STA);
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  esp_now_register_recv_cb(onDataReceived);
}

void loop() {}

void onDataReceived(const uint8_t *mac, const uint8_t *data, int len) {
  memcpy(&leaderData, data, sizeof(leaderData));

  int deltaX = leaderData.posX - followerPosX;
  int deltaY = leaderData.posY - followerPosY;

  if (abs(deltaX) > movementThreshold || abs(deltaY) > movementThreshold) {
    followerPosX += (deltaX > 0) ? 10 : (deltaX < 0) ? -10 : 0;
    followerPosY += (deltaY > 0) ? 10 : (deltaY < 0) ? -10 : 0;
    handleLeaderCommand();
  } else {
    stop();
  }
}

void handleLeaderCommand() {
  if (leaderData.command == 'F') forward();
  else if (leaderData.command == 'B') backward();
  else if (leaderData.command == 'L') left();
  else if (leaderData.command == 'R') right();
  else if (leaderData.command == 'S') stop();
}

void forward() {
  ledcWrite(R, leaderData.speed);
  ledcWrite(L, leaderData.speed);
  digitalWrite(IN1, HIGH); digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW); digitalWrite(IN4, HIGH);
}

void backward() {
  ledcWrite(R, leaderData.speed);
  ledcWrite(L, leaderData.speed);
  digitalWrite(IN1, LOW); digitalWrite(IN2, HIGH);
  digitalWrite(IN3, HIGH); digitalWrite(IN4, LOW);
}

void left() {
  ledcWrite(R, leaderData.speed);
  ledcWrite(L, leaderData.speed);
  digitalWrite(IN1, HIGH); digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH); digitalWrite(IN4, LOW);
}

void right() {
  ledcWrite(R, leaderData.speed);
  ledcWrite(L, leaderData.speed);
  digitalWrite(IN1, LOW); digitalWrite(IN2, HIGH);
  digitalWrite(IN3, LOW); digitalWrite(IN4, HIGH);
}

void stop() {
  ledcWrite(R, 0);
  ledcWrite(L, 0);
  digitalWrite(IN1, LOW); digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW); digitalWrite(IN4, LOW);
}
