#include <WiFi.h>
#include <esp_now.h>

// Motor control pins
int enA = 5, enB = 23;
int IN1 = 22, IN2 = 21, IN3 = 19, IN4 = 18;
#define R 0
#define L 1

// Structure to match leader's data
typedef struct {
  int posX;       // Leader's X position
  int posY;       // Leader's Y position
  char command;   // Directional command ('F', 'B', 'L', 'R', 'S')
  int speed;      // Leader's speed
} LeaderData;

LeaderData leaderData;

// Callback function for ESP-NOW
void onDataReceived(const uint8_t *mac, const uint8_t *data, int len) {
  memcpy(&leaderData, data, sizeof(leaderData));
  Serial.println("Data received from Leader:");
  Serial.print("Position X: "); Serial.println(leaderData.posX);
  Serial.print("Position Y: "); Serial.println(leaderData.posY);
  Serial.print("Command: "); Serial.println(leaderData.command);
  Serial.print("Speed: "); Serial.println(leaderData.speed);

  // Act based on leader's command
  handleLeaderCommand();
}

void setup() {
  Serial.begin(115200);

  // Setup motor control pins and PWM
  pinMode(enA, OUTPUT);
  pinMode(enB, OUTPUT);
  ledcSetup(R, 5000, 8);  ledcAttachPin(enA, R);
  ledcSetup(L, 5000, 8);  ledcAttachPin(enB, L);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  stop();  // Set motors to stop initially

  // Initialize ESP-NOW
  WiFi.mode(WIFI_STA);
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  Serial.println("ESP-NOW initialized");

  // Register callback function for receiving data
  esp_now_register_recv_cb(onDataReceived);
}

void loop() {
  // Main loop does nothing; follower actions are triggered by ESP-NOW callback
}

// Function to handle commands from the leader
void handleLeaderCommand() {
  switch (leaderData.command) {
    case 'F': forward(); break;
    case 'B': backward(); break;
    case 'L': left(); break;
    case 'R': right(); break;
    case 'S': stop(); break;
  }
}

// Motor control functions
void forward() {
  ledcWrite(R, leaderData.speed);
  ledcWrite(L, leaderData.speed);
  digitalWrite(IN1, HIGH); digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW); digitalWrite(IN4, HIGH);
}

void backward() {
  ledcWrite(R, leaderData.speed);
  ledcWrite(L, leaderData.speed);
  digitalWrite(IN1, LOW); digitalWrite(IN2, HIGH);
  digitalWrite(IN3, HIGH); digitalWrite(IN4, LOW);
}

void left() {
  ledcWrite(R, leaderData.speed);
  ledcWrite(L, leaderData.speed);
  digitalWrite(IN1, HIGH); digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH); digitalWrite(IN4, LOW);
}

void right() {
  ledcWrite(R, leaderData.speed);
  ledcWrite(L, leaderData.speed);
  digitalWrite(IN1, LOW); digitalWrite(IN2, HIGH);
  digitalWrite(IN3, LOW); digitalWrite(IN4, HIGH);
}

void stop() {
  ledcWrite(R, 0);
  ledcWrite(L, 0);
  digitalWrite(IN1, LOW); digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW); digitalWrite(IN4, LOW);
}

