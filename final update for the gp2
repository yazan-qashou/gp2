
//best leader

#include "BluetoothSerial.h"
#include <WiFi.h>
#include <esp_now.h>
#include <Wire.h>
#include <QMC5883LCompass.h>

// -------------------- Bluetooth & Compass -------------------- //
BluetoothSerial serialBT;
QMC5883LCompass compass;

// -------------------- Pins -------------------- //
int enA = 5, enB = 23; // Motor driver pins
int IN1 = 32, IN2 = 33, IN3 = 19, IN4 = 18;

#define R 0 // PWM channel for Right motor
#define L 1 // PWM channel for Left motor

// -------------------- Encoder Pins -------------------- //
const int rightEncPin = 12;
const int leftEncPin = 14;

// -------------------- Encoder Variables -------------------- //
volatile unsigned int rightCounter = 0;
volatile unsigned int leftCounter = 0;
unsigned long motorStartTime = 0;
bool motorOn = false;

// -------------------- ESP-NOW -------------------- //
uint8_t followerAddr[] = {0xFC, 0xE8, 0xC0, 0x75, 0x06, 0xC4};

// Leader Data Structure
typedef struct {
  char command;        // Movement command
  int speed;           // Motor speed
  unsigned long runTime; // Time motors were running
  int azimuth;         // Compass azimuth
} LeaderData;

LeaderData leaderData = {'S', 0, 0, 0}; // Initialize with default values

// -------------------- ISR Definitions -------------------- //
void IRAM_ATTR ISR_countRight() { rightCounter++; }
void IRAM_ATTR ISR_countLeft() { leftCounter++; }

// -------------------- Setup -------------------- //
void setup() {
  Serial.begin(115200);
  serialBT.begin("car(yazan)");
  Serial.println("Bluetooth initialized");

  // Motor setup
  pinMode(enA, OUTPUT);
  pinMode(enB, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);

  ledcSetup(R, 5000, 8);
  ledcAttachPin(enA, R);
  ledcSetup(L, 5000, 8);
  ledcAttachPin(enB, L);

  stop(); // Ensure motors are off at start

  // Encoder setup
  pinMode(rightEncPin, INPUT);
  pinMode(leftEncPin, INPUT);
  attachInterrupt(digitalPinToInterrupt(rightEncPin), ISR_countRight, RISING);
  attachInterrupt(digitalPinToInterrupt(leftEncPin), ISR_countLeft, RISING);

  // ESP-NOW setup
  WiFi.mode(WIFI_STA);
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  esp_now_peer_info_t peerInfo = {};
  memcpy(peerInfo.peer_addr, followerAddr, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;
  esp_now_add_peer(&peerInfo);

  // Compass setup
  Wire.begin(21, 22); // SDA = GPIO21, SCL = GPIO22
  compass.init();
}

// -------------------- Loop -------------------- //
void loop() {
  while (serialBT.available()) {
    char btSignal = serialBT.read();

    // Handle speed settings
    if (btSignal >= '0' && btSignal <= '9') {
      leaderData.speed = 100 + (btSignal - '0') * 10;
    } else if (btSignal == 'q') {
      leaderData.speed = 255;
    }

    // Handle movement commands
    if (btSignal == 'F') forward();
    else if (btSignal == 'B') backward();
    else if (btSignal == 'L') left();
    else if (btSignal == 'R') right();
    else if (btSignal == 'S') stop();

    // Send updated data to follower
    sendLeaderData();
  }
}

// -------------------- Movement -------------------- //
void forward() {
  startMotor();
  ledcWrite(R, leaderData.speed);
  ledcWrite(L, leaderData.speed);
  digitalWrite(IN1, HIGH); digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);  digitalWrite(IN4, HIGH);
  leaderData.command = 'F';
}

void backward() {
  startMotor();
  ledcWrite(R, leaderData.speed);
  ledcWrite(L, leaderData.speed);
  digitalWrite(IN1, LOW);  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, HIGH); digitalWrite(IN4, LOW);
  leaderData.command = 'B';
}

void left() {
  startMotor();
  ledcWrite(R, leaderData.speed);
  ledcWrite(L, leaderData.speed);
  digitalWrite(IN1, LOW);  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, LOW);  digitalWrite(IN4, HIGH);
  leaderData.command = 'L';
}

void right() {
  startMotor();
  ledcWrite(R, leaderData.speed);
  ledcWrite(L, leaderData.speed);
  digitalWrite(IN1, HIGH); digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH); digitalWrite(IN4, LOW);
  leaderData.command = 'R';
}

void stop() {
  if (motorOn) {
    leaderData.runTime = millis() - motorStartTime; // Calculate motor run time
    motorOn = false;
  }
  ledcWrite(R, 0);
  ledcWrite(L, 0);
  digitalWrite(IN1, LOW); digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW); digitalWrite(IN4, LOW);
  leaderData.command = 'S';
}

// -------------------- Helper Functions -------------------- //
void startMotor() {
  if (!motorOn) {
    motorStartTime = millis();
    motorOn = true;
  }
}

void sendLeaderData() {
  // Include compass azimuth in data
  compass.read();
  leaderData.azimuth = compass.getAzimuth();
  esp_now_send(followerAddr, (uint8_t*)&leaderData, sizeof(leaderData));
}


---------------------------------------------------------------------------------------------------------------------------------
___________________________________________________________________________________________

\\follower 1 
#include <WiFi.h>
#include <esp_now.h>
#include <Wire.h>
#include <QMC5883LCompass.h>

// ------------------- Pins ------------------- //
int enA = 5, enB = 23;
int IN1 = 32, IN2 = 33, IN3 = 19, IN4 = 18;

#define R 0 // PWM channel for Right motor
#define L 1 // PWM channel for Left motor

// ------------------- Encoder Pins ------------------- //
const int rightEncPin = 12;
const int leftEncPin = 14;

volatile unsigned int rightCounter = 0;
volatile unsigned int leftCounter = 0;

// ------------------- Compass ------------------- //
QMC5883LCompass compass;

// ------------------- Calibration Factor ------------------- //
const float calibrationFactor = 0.071;
const unsigned long minRunTime = 350;
const int alignmentThreshold = 1.5; // Degrees for alignment

// ------------------- Leader -> Follower Data ------------------- //
typedef struct {
  char command;
  int speed;
  unsigned long runTime;
  int azimuth; // Compass azimuth
} LeaderData;

LeaderData receivedData;
LeaderData followerData; // Data to send to Follower 2

// ------------------- Next Follower Address ------------------- //
uint8_t nextFollowerAddr[] = {0xe8, 0x6b, 0xea, 0xd3, 0xff, 0x68}; // Replace with Follower 2's MAC address

// ------------------- ISR Definitions ------------------- //
void IRAM_ATTR ISR_countRight() { rightCounter++; }
void IRAM_ATTR ISR_countLeft() { leftCounter++; }

// ------------------- Setup ------------------- //
void setup() {
  Serial.begin(115200);

  pinMode(enA, OUTPUT);
  pinMode(enB, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);

  ledcSetup(R, 5000, 8);
  ledcAttachPin(enA, R);
  ledcSetup(L, 5000, 8);
  ledcAttachPin(enB, L);

  stop();

  pinMode(rightEncPin, INPUT);
  pinMode(leftEncPin, INPUT);
  attachInterrupt(digitalPinToInterrupt(rightEncPin), ISR_countRight, RISING);
  attachInterrupt(digitalPinToInterrupt(leftEncPin), ISR_countLeft, RISING);

  WiFi.mode(WIFI_STA);
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  esp_now_register_recv_cb(onDataReceived);

  // Add Follower 2 as a peer
  esp_now_peer_info_t peerInfo = {};
  memcpy(peerInfo.peer_addr, nextFollowerAddr, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;
  esp_now_add_peer(&peerInfo);

  Wire.begin(21, 22);
  compass.init();
}

// ------------------- Loop ------------------- //
void loop() {
  executeCommand();
}

// ------------------- Data Received ------------------- //
void onDataReceived(const uint8_t *mac, const uint8_t *data, int len) {
  if (len == sizeof(LeaderData)) {
    memcpy(&receivedData, data, sizeof(LeaderData));
    executeCommand();
    sendFollowerData(); // Send updated data to Follower 2
  }
}

// ------------------- Send Data to Follower 2 ------------------- //
void sendFollowerData() {
  memcpy(&followerData, &receivedData, sizeof(LeaderData));
  followerData.azimuth = compass.getAzimuth(); // Update with the follower's azimuth
  esp_now_send(nextFollowerAddr, (uint8_t*)&followerData, sizeof(followerData));
}

// ------------------- Execute Leader Command ------------------- //
void executeCommand() {
  switch (receivedData.command) {
    case 'F': moveForward(receivedData.speed, receivedData.runTime); break;
    case 'B': moveBackward(receivedData.speed, receivedData.runTime); break;
    case 'L': moveLeft(receivedData.speed, receivedData.azimuth); break;
    case 'R': moveRight(receivedData.speed, receivedData.azimuth); break;
    case 'S': stop(); break;
    default: stop(); break;
  }
}

// ------------------- Movement ------------------- //
void moveForward(int speed, unsigned long leaderRunTime) {
  resetEncoders();
  unsigned long startTime = millis();
  forward(speed);

  while (millis() - startTime < max(leaderRunTime, minRunTime) * calibrationFactor) {
    unsigned int rightCount = rightCounter;
    unsigned int leftCount = leftCounter;

    if (abs((int)rightCount - (int)leftCount) > 2) {
      if (rightCount > leftCount) ledcWrite(L, speed + 10);
      else if (leftCount > rightCount) ledcWrite(R, speed + 10);
    }
  }
  stop();
}

void moveBackward(int speed, unsigned long leaderRunTime) {
  resetEncoders();
  unsigned long startTime = millis();
  backward(speed);

  while (millis() - startTime < max(leaderRunTime, minRunTime) * calibrationFactor) {
    unsigned int rightCount = rightCounter;
    unsigned int leftCount = leftCounter;

    if (abs((int)rightCount - (int)leftCount) > 2) {
      if (rightCount > leftCount) ledcWrite(L, speed + 10);
      else if (leftCount > rightCount) ledcWrite(R, speed + 10);
    }
  }
  stop();
}

void moveLeft(int speed, int leaderAzimuth) {
  alignToAzimuth(leaderAzimuth);
  left(speed);
  delay(minRunTime);
  stop();
}

void moveRight(int speed, int leaderAzimuth) {
  alignToAzimuth(leaderAzimuth);
  right(speed);
  delay(minRunTime);
  stop();
}

// ------------------- Azimuth Alignment ------------------- //
void alignToAzimuth(int leaderAzimuth) {
  if (leaderAzimuth < 0 || leaderAzimuth > 359) return;

  while (true) {
    compass.read();
    int followerAzimuth = compass.getAzimuth();
    int diff = leaderAzimuth - followerAzimuth;

    if (diff > 180) diff -= 360;
    if (diff < -180) diff += 360;

    if (abs(diff) <= alignmentThreshold) break;

    if (diff > 0) right(100);
    else left(100);

    delay(50);
    stop();
  }
}

// ------------------- Helper Functions ------------------- //
void resetEncoders() {
  noInterrupts();
  rightCounter = 0;
  leftCounter = 0;
  interrupts();
}

// ------------------- Motor Control ------------------- //
void forward(int speedVal) {
  ledcWrite(R, speedVal);
  ledcWrite(L, speedVal);
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
}

void backward(int speedVal) {
  ledcWrite(R, speedVal);
  ledcWrite(L, speedVal);
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
}

void left(int speedVal) {
  ledcWrite(R, speedVal);
  ledcWrite(L, speedVal);
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
}

void right(int speedVal) {
  ledcWrite(R, speedVal);
  ledcWrite(L, speedVal);
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
}

void stop() {
  ledcWrite(R, 0);
  ledcWrite(L, 0);
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
}

