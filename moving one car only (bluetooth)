#include <dummy.h>

// esp32 board version must be 2.0.11
// otherwise the code will not compile

#include "BluetoothSerial.h"
#include <Arduino.h>
BluetoothSerial serialBT;

// Bluetooth signal store in this variable
char btSignal;

// Initial speed
int Speed = 50;

// Declare channel for PWM output
#define R 0
#define L 1

// PWM Pin for controlling the speed
int enA = 5;
int enB = 23;

// Motor controlling pins
int IN1 = 22;
int IN2 = 21;
int IN3 = 19;
int IN4 = 18;

void setup() {
  Serial.begin(115200);

  // Bluetooth Name
  serialBT.begin("CAR GO VROOM VROOM");

  // Output pin declare
  pinMode(enA, OUTPUT);
  pinMode(enB, OUTPUT);

  // Setup PWM channels
  ledcSetup(R, 5000, 8);  // Channel 0 for Motor A, 5 kHz frequency, 8-bit resolution
  ledcAttachPin(enA, R);
  ledcSetup(L, 5000, 8);  // Channel 1 for Motor B, 5 kHz frequency, 8-bit resolution
  ledcAttachPin(enB, L);

  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);

  // Initial state of Car
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
}

void loop() {
  while (serialBT.available()) {
    btSignal = serialBT.read();
    // Serial.println(btSignal);

    if (btSignal >= '0' && btSignal <= '9') {
      Speed = 100 + (btSignal - '0') * 10; // Adjust speed based on received character
    }
    else if (btSignal == 'q') Speed = 250;

    // To see the incoming signal in serial monitor
    Serial.println(btSignal);

    // Control motor based on btSignal
    if (btSignal == 'B') {
      backward();
    }
    else if (btSignal == 'F') {
      forward();
    }
    else if (btSignal == 'L') {
      left();
    }
    else if (btSignal == 'R') {
      right();
    }
    else if (btSignal == 'S') {
      stop();
    }
    else if (btSignal == 'I') {
      frontright();
    }
    else if (btSignal == 'G') {
      frontleft();
    }
  }
}

// Function for control motor
void backward() {
  ledcWrite(R, Speed);
  ledcWrite(L, Speed);

  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
}

void forward() {
  ledcWrite(R, Speed);
  ledcWrite(L, Speed);

  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
}

void left() {
  ledcWrite(R, Speed);
  ledcWrite(L, Speed);

  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
}

void right() {
  ledcWrite(R, Speed);
  ledcWrite(L, Speed);

  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
}

void frontright() {
  ledcWrite(R, Speed);
  ledcWrite(L, Speed);

  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, HIGH);
}

void frontleft() {
  ledcWrite(R, Speed);
  ledcWrite(L, Speed);

  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
}

void stop() {
  ledcWrite(R, 0); // Stop motor A
  ledcWrite(L, 0); // Stop motor B

  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
}
